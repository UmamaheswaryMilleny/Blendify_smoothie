<%- include("../../views/partials/admin/header") %>
<head>
   <style>
       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }

       .thumbnail {
           margin-right: 10px;
           position: relative;
       }

       .thumbnail img {
           width: 100px;
           height: auto;
           border-radius: 5px;
       }

       .thumbnail .remove-icon {
           position: absolute;
           top: 5px;
           right: 5px;
           background: rgba(255, 0, 0, 0.7);
           color: white;
           border-radius: 50%;
           cursor: pointer;
           padding: 2px 5px;
       }

       .input-upload {
           position: relative;
       }

       .error-message {
           color: red;
           display: none;
       }

       .image-cropper {
           display: none;
           width: 300px;
           height: 200px;
           margin-bottom: 20px;
       }

       .image-cropper img {
           max-width: 100%;
           max-height: 100%;
       }

       .image-cropper button {
           margin-top: 10px;
       }

       .card-body {
           background-color: #f8f9fa;
           border-radius: 10px;
           padding: 20px;
           box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
       }

       .form-label {
           font-weight: bold;
           color: #333;
       }

       .form-control {
           border-radius: 5px;
           border: 1px solid #ced4da;
       }

       .btn-primary {
           background-color: #007bff;
           border-color: #007bff;
           border-radius: 5px;
       }

       .btn-primary:hover {
           background-color: #0056b3;
           border-color: #0056b3;
       }

       .file-input-container {
           display: flex;
           align-items: center;
           margin-bottom: 20px;
       }

       .file-input-container img {
           width: 100px;
           height: auto;
           margin-right: 10px;
           border-radius: 5px;
       }

       .file-input-container input[type="file"] {
           display: none;
       }

       .file-input-container label {
           background-color: #007bff;
           color: white;
           padding: 5px 10px;
           border-radius: 5px;
           cursor: pointer;
       }
   </style>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>" class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea name="descriptionData" class="form-control border" rows="4"><%=product.description%></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text" value="<%=product.regularPrice%>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label">Sale price</label>
                                <input name="salePrice" type="text" value="<%=product.salePrice%>" class="form-control border">
                            </div>
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4"></div>
                            <div class="mb-4">
                                <label class="form-label">Sizes</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="S" id="size6" <% if (product.sizes.some(size => size.size === 'S')) { %> checked <% } %>>
                                    <label class="form-check-label" for="sizeS">S</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity6" name="quantityS" placeholder="Quantity" value="<%= product.sizes.find(size => size.size === 'S')?.quantity || '' %>" <% if (product.sizes.some(size => size.size === 'S')) { %> style="display:block;" <% } else { %> style="display:none;" <% } %>>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="M" id="size7" <% if (product.sizes.some(size => size.size === 'M')) { %> checked <% } %>>
                                    <label class="form-check-label" for="sizeM">M</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity7" name="quantityM" placeholder="Quantity" value="<%= product.sizes.find(size => size.size === 'M')?.quantity || '' %>" <% if (product.sizes.some(size => size.size === 'M')) { %> style="display:block;" <% } else { %> style="display:none;" <% } %>>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="sizes" value="L" id="size8" <% if (product.sizes.some(size => size.size === 'L')) { %> checked <% } %>>
                                    <label class="form-check-label" for="sizeL">L</label>
                                    <input type="number" class="form-control mt-2 size-quantity" id="quantity8" name="quantityL" placeholder="Quantity" value="<%= product.sizes.find(size => size.size === 'L')?.quantity || '' %>" <% if (product.sizes.some(size => size.size === 'L')) { %> style="display:block;" <% } else { %> style="display:none;" <% } %>>
                                </div>
                                <div id="sizes-error" class="error-message"></div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <% for(let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>" <%= product.category.equals(cat[i]._id) ? 'selected' : '' %>>
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                            </div>
                            <div class="card-body">
                                <div class="thumbnails-container" id="thumbnails-container">
                                    <% for(let i=0; i<product.productImage.length; i++){ %>
                                        <div class="thumbnail">
                                            <img src="/uploads/re-image/<%=product.productImage[i]%>" alt="">
                                            <span class="remove-icon" onclick="deleteSingleImage('<%=product.productImage[i]%>', '<%=product._id%>')">&times;</span>
                                        </div>
                                    <% } %>
                                </div>
                                <div class="file-input-container">
                                    <img src="" alt="" id="imgView1">
                                    <label for="input1">Choose Image</label>
                                    <input type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 1)">
                                    <div id="images-error" class="error-message"></div>
                                </div>
                                <div class="image-cropper d-flex align-items-center">
                                    <img src="" id="croppedImg1" alt="">
                                    <button type="button" id="saveButton1" class="btn-sm btn-primary" onclick="saveCroppedImage(1)">Save</button>
                                </div>
                                <div class="file-input-container">
                                    <img src="" alt="" id="imgView2">
                                    <label for="input2">Choose Image</label>
                                    <input type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 2)">
                                </div>
                                <div class="image-cropper d-flex align-items-center">
                                    <img src="" id="croppedImg2" alt="">
                                    <button type="button" id="saveButton2" class="btn-sm btn-primary" onclick="saveCroppedImage(2)">Save</button>
                                </div>
                                <div class="file-input-container">
                                    <img src="" alt="" id="imgView3">
                                    <label for="input3">Choose Image</label>
                                    <input type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 3)">
                                </div>
                                <div class="image-cropper d-flex align-items-center">
                                    <img src="" id="croppedImg3" alt="">
                                    <button type="button" id="saveButton3" class="btn-sm btn-primary" onclick="saveCroppedImage(3)">Save</button>
                                </div>
                                <div class="file-input-container">
                                    <img src="" alt="" id="imgView4">
                                    <label for="input4">Choose Image</label>
                                    <input type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 4)">
                                </div>
                                <div class="image-cropper d-flex align-items-center">
                                    <img src="" id="croppedImg4" alt="">
                                    <button type="button" id="saveButton4" class="btn-sm btn-primary" onclick="saveCroppedImage(4)">Save</button>
                                </div>
                                <div id="image-limit-error" class="error-message"></div>
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="submit" onclick="validateForm()">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
    function validateAndSubmit() {
        if (validateForm()) {
            document.forms[0].submit();
        }
    }

    document.querySelectorAll('.form-check-input').forEach((checkbox) => {
        checkbox.addEventListener('change', function () {
            const quantityInput = document.getElementById(`quantity${this.value}`);
            if (this.checked) {
                quantityInput.style.display = 'block';
            } else {
                quantityInput.style.display = 'none';
                quantityInput.value = '';  // Clear the quantity value
            }
        });
    });

    function getSelectedSizesAndQuantities() {
        const selectedSizes = [];

        document.querySelectorAll('.form-check-input').forEach((checkbox) => {
            if (checkbox.checked) {
                const size = checkbox.value;  // Get the size
                const quantity = +document.getElementById(`quantity${size}`).value;  // Get the corresponding quantity
                selectedSizes.push({ size, quantity });
            }
        });

        return selectedSizes;
    }

    function validateForm() {
    let imageDatas = false;
    clearErrorMessages();  // Clears previous error messages

    const name = document.getElementsByName('productName')[0].value.trim();
    const description = document.getElementsByName('descriptionData')[0].value.trim();
    const price = document.getElementsByName('regularPrice')[0].value;
    const salePrice = document.getElementsByName('salePrice')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const images = [
        document.getElementById('input1'),
        document.getElementById('input2'),
        document.getElementById('input3'),
        document.getElementById('input4')
    ];
    const selectedSizes = getSelectedSizesAndQuantities();  // Assuming this function retrieves selected sizes with quantities

    let isValid = true;

    // Validate product name
    if (!name) {
        displayErrorMessage('productName-error', 'Product name is required.');
        isValid = false;
    }

    // Validate description
    if (!description) {
        displayErrorMessage('description-error', 'Description is required.');
        isValid = false;
    }

    // Validate category
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    // Validate regular price
    if (!price || isNaN(price) || price <= 0) {
        displayErrorMessage('regularPrice-error', 'Regular price must be a positive number.');
        isValid = false;
    }

    // Validate sale price
    if (!salePrice || isNaN(salePrice) || salePrice <= 0) {
        displayErrorMessage('salePrice-error', 'Sale price must be a positive number.');
        isValid = false;
    }

    // Validate selected sizes and quantities
    if (!selectedSizes.length) {
        displayErrorMessage('sizes-error', 'Please select at least one size.');
        isValid = false;
    } else {
        for (let i = 0; i < selectedSizes.length; i++) {
            if (selectedSizes[i].quantity <= 0 || isNaN(selectedSizes[i].quantity)) {
                displayErrorMessage('sizes-error', 'Quantity for selected sizes must be a positive number.');
                isValid = false;
                break;
            }
        }
    }

    // Validate image count and image file types and sizes
    const existingImages = document.querySelectorAll('.thumbnail').length;
    const newImages = images.filter(input => input.files.length > 0).length;

    if (existingImages + newImages !== 4) {
        displayErrorMessage('image-limit-error', 'Please upload exactly 4 images.');
        isValid = false;
    } else {
        // Check file type and size for new images
        for (let i = 0; i < images.length; i++) {
            if (images[i].files.length > 0) {
                const file = images[i].files[0];
                const fileType = file.type;
                const fileSize = file.size;

                // Check file type
                if (!['image/jpeg', 'image/jpg', 'image/png'].includes(fileType)) {
                    displayErrorMessage('image-limit-error', `Invalid file type for image ${i + 1}. Only JPEG and PNG are allowed.`);
                    isValid = false;
                }

                // Check file size (e.g., 2MB max size)
                if (fileSize > 2 * 1024 * 1024) {
                    displayErrorMessage('image-limit-error', `File size for image ${i + 1} exceeds the 2MB limit.`);
                    isValid = false;
                }
            }
        }
    }

    // Final validation check
    return isValid;
}

    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = 'none';
        });
    }

    function viewImage(event, index) {
        const existingImages = document.querySelectorAll('.thumbnail').length;
        if (existingImages >= 4) {
            alert('You can only upload a maximum of 4 images.');
            return;
        }
        let input = event.target;
        let reader = new FileReader();
        reader.onload = function () {
            let dataURL = reader.result;
            let image = document.getElementById('imgView' + index);
            image.src = dataURL;
            let cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });
            let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
            cropperContainer.style.display = 'block';
            let saveButton = document.querySelector('#saveButton' + index);
            saveButton.addEventListener('click', async function () {
                let croppedCanvas = cropper.getCroppedCanvas();
                let croppedImage = document.getElementById("croppedImg" + index);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                let timestamp = new Date().getTime();
                let fileName = `cropped-img-${timestamp}-${index}.png`;
                await croppedCanvas.toBlob(blob => {
                    let input = document.getElementById('input' + index);
                    let imgFile = new File([blob], fileName, blob)
                    const fileList = new DataTransfer();
                    fileList.items.add(imgFile);
                    input.files = fileList.files
                });
                cropperContainer.style.display = 'none';
                addThumbnail(croppedImage.src, index);
            });
        };
        reader.readAsDataURL(input.files[0]);
    }

    function addThumbnail(imageSrc, index) {
        const thumbnailsContainer = document.getElementById('thumbnails-container');
        const thumbnailDiv = document.createElement('div');
        thumbnailDiv.classList.add('thumbnail');
        const imgElement = document.createElement('img');
        imgElement.src = imageSrc;
        const removeIcon = document.createElement('span');
        removeIcon.classList.add('remove-icon');
        removeIcon.innerHTML = '&times;';
        removeIcon.onclick = function () {
            thumbnailDiv.remove();
        };
        thumbnailDiv.appendChild(imgElement);
        thumbnailDiv.appendChild(removeIcon);
        thumbnailsContainer.appendChild(thumbnailDiv);
    }

    function deleteSingleImage(imageId, productId) {
        const existingImages = document.querySelectorAll('.thumbnail').length;
        if (existingImages <= 1) {
            alert('You must have at least one image.');
            return;
        }
        $.ajax({
            url: "/admin/deleteImage",
            method: "POST",
            data: {
                imageNameToServer: imageId,
                productIdToServer: productId
            },
            success: function (response) {
                if (response.status === true) {
                    window.location.reload();
                } else {
                    alert('Image deletion failed');
                }
            },
            error: function (error) {
                console.log(error);
                alert('An error occurred while deleting the image');
            }
        });
    }
</script>    
<%- include("../../views/partials/admin/footer") %>