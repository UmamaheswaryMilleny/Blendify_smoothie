<%-include("../../views/partials/user/header")%>
<style>
      body{

background: url("/images/userImg/home/img2_1.png") no-repeat center
        center fixed;
      background-size: cover;
      color: #fff;
   
}
    #retry-payment-btn{
        color: #fff;
    background-color: #6c757d;
    border-color: #6c757d;
    border: none;
    border-radius: 5px;
    }
    footer{
    margin-top: 30px;
  }
  .table-dark,.btn-primary{
    background-color: #fa8a00 !important;
  }
  .table{
    background: rgba(139, 0, 0, 0.85);
    
  }
  .list{
    color: black;
  }
  tr{
    color: white;
  }
  tr:hover{
    color: white !important;
  }
  .btn-danger{
    background-color: red;
  }
  .form-select{
    color: black !important;
  }
</style>
<!-- Modal for Return Order -->
<div class="modal fade" id="returnOrderModal" tabindex="-1" aria-labelledby="returnOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnOrderModalLabel">Return Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Please select a reason for return:</p>
                <form id="returnOrderForm">
                    <input type="hidden" id="returnOrderId" name="orderId" value="">
                    <div class="mb-3">
                        <select id="returnReason" class="form-select" required>
                            <option value="" disabled selected style="color: black;">Select a reason</option>
                            <option value="The food is not good">The food is not good</option>
                            <option value="Damaged product">Damaged product</option>
                            <option value="Wrong item delivered">Wrong item delivered</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="confirmReturnOrder">Confirm Return</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Cancel Order -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Please select a reason for cancellation:</p>
                <form id="cancelOrderForm">
                    <input type="hidden" id="cancelOrderId" name="orderId" value="">
                    <div class="mb-3">
                        <select id="cancelReason" class="form-select" required>
                            <option value="" disabled selected style="color: black;">Select a reason</option>
                            <option value="Changed my mind">Changed my mind</option>
                            <option value="Ordered by mistake">Ordered by mistake</option>
                            <option value="Found a better price elsewhere">Found a better price elsewhere</option>
                            <option value="Delivery taking too long">Delivery taking too long</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="confirmCancelOrder">Confirm Cancellation</button>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4" >
    <div class="row">
        <!-- Sidebar -->
        <%- include("../../views/partials/user/profile-sidebar") %>

        <!-- Orders Table -->
        <div class="col-md-9">
            <h3><b>My Orders</b></h3>
            <% if (orders.length > 0) { %>
            <table class="table table-bordered table-hover">
                <thead class="thead">
                    <tr>
                        <th>Order ID</th>
                        <th>Status</th>
                        <th>Total Price</th>
                        <th>Address</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Action</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order => { %>
                        <tr>
                            <td><%= order.orderId %></td>
                            <td><%= order.status %></td>
                            <td>â‚¹<%= order.totalAmountWithDelivery %></td>
                            <td>
                                <%= order.addressDetails 
                                    ? `${order.addressDetails.houseName}, ${order.addressDetails.street}, ${order.addressDetails.city}, ${order.addressDetails.state}, ${order.addressDetails.pincode}` 
                                    : 'Address not found' 
                                %>
                            </td>                            
                            <td>
                                <% order.orderedItems.forEach(item => { %>
                                    <div><%= item.productName ? item.productName : 'Product not found' %></div>
                                <% }) %>
                            </td>
                            <td>
                                <% order.orderedItems.forEach(item => { %>
                                    <div><%= item.quantity %></div>
                                <% }) %>
                            </td>
                            <td>
                                <% if (order.status === 'Canceled') { %>
                                    <button class="btn btn-secondary" disabled>Canceled</button>
                                <% } else if (order.status == 'Pending') { %>
                                    <button id="retry-payment-btn" data-order-id="<%= order.orderId %>">
                                        Retry Payment
                                    </button>
                                <% } else if (order.status == 'Delivered') { %>
                                    <button id="requestReturn" class="request-return-btn" data-order-id="<%= order.orderId %>">
                                        Request Return
                                    </button>
                                <% } else if (order.status == 'Return Request') { %>
                                    <button class="btn btn-secondary " disabled>Return requested</button>                                                                        
                                <% } else if (order.status == 'Return Accepted') { %>
                                    <button class="btn btn-secondary" disabled>Return Accepted</button>
                                <% } else if (order.status !== 'Delivered') { %>
                                    <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order._id %>">Cancel</button>
                                <% } else { %>
                                    <span>N/A</span>
                                <% } %>                                
                            </td>
                            
                            <td><a href="/orderDetails/<%=order._id%>" style="color: #fff;">Order Details</a></td>                                               
                        </tr>
                    <% }) %>
                </tbody>                
            </table>
            <% } else { %>
                <p style="color: #fff;">No orders found. Start shopping to place your first order!</p>
            <% } %>
        </div>
    </div>
</div>

<%-include("../../views/partials/user/footer")%>

<script>
    document.addEventListener('DOMContentLoaded', function () {
  
        const cancelButtons = document.querySelectorAll('.cancel-order-btn');
    cancelButtons.forEach(button => {
        button.addEventListener('click', function () {
            const orderId = this.getAttribute('data-order-id');

            // Set the hidden input value in the modal with the order ID
            document.getElementById('cancelOrderId').value = orderId;

            // Show the cancel order modal (Bootstrap)
            const cancelOrderModal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
            cancelOrderModal.show();
        });
    });

    // Confirm cancellation button logic
    const confirmCancelButton = document.getElementById('confirmCancelOrder');
    confirmCancelButton.addEventListener('click', function () {
        const orderId = document.getElementById('cancelOrderId').value;
        const reason = document.getElementById('cancelReason').value;

        if (!reason) {
            Swal.fire({
                title: 'Error!',
                text: 'Please select a reason for cancellation.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        // Send cancellation request to the server
        fetch(`/cancel-order/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reason })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Canceled!',
                    text: 'Your order has been canceled.',
                    icon: 'success'
                }).then(() => {
                    window.location.reload(); // Reload the page to reflect changes
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Failed to cancel the order.',
                    icon: 'error'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred.',
                icon: 'error'
            });
        });
    });



    
    const retryPaymentButtons = document.querySelectorAll('#retry-payment-btn'); 
    retryPaymentButtons.forEach(button => {
        button.addEventListener('click', async function () {
            const orderId = this.getAttribute('data-order-id');

            try {
                Swal.fire({
                    title: 'Processing...',
                    text: 'Initializing retry payment. Please wait.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/retry-payment/${orderId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.close();
                    const { finalAmount, razorpayKey, orderId } = data;

                    const options = {
                        key: razorpayKey,
                        amount: finalAmount * 100, // Amount in paise
                        currency: "INR",
                        name: "Blendify",
                        description: "Purchase Description",
                        order_id: orderId,
                        handler: async function (response) {
                            await verifyRetryPayment(
                                response.razorpay_payment_id,
                                response.razorpay_order_id,
                                response.razorpay_signature
                            );
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire({
                                    title: 'Payment Canceled',
                                    text: 'You canceled the payment process.',
                                    icon: 'info'
                                });
                            }
                        },
                        prefill: {
                            name: "Customer Name",
                            email: "customer@example.com",
                            contact: "9999999999"
                        },
                        theme: { color: "#F37254" }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                } else {
                    Swal.fire(
                        'Failed',
                        data.message || "Failed to initialize retry payment. Please try again later.",
                        'error'
                    );
                }
            } catch (error) {
                console.error("Error during retry payment initialization:", error);
                Swal.fire(
                    'Error!',
                    'An error occurred. Please try again later.',
                    'error'
                );
            }
        });
    });
// Verify retry payment function
async function verifyRetryPayment(razorpay_payment_id, razorpay_order_id, razorpay_signature) {
        try {
            Swal.fire({
                title: 'Verifying Payment',
                text: 'Please wait while we verify your payment.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch('/verify-retry-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ razorpay_payment_id, razorpay_order_id, razorpay_signature })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Payment verified successfully!',
                    icon: 'success'
                }).then(() => {
                    window.location.href = `/order-confirmation/${data.orderId}`;
                });
            } else {
                Swal.fire({
                    title: "Error!",
                    text: data.message || "Payment verification failed.",
                    icon: "error"
                });
            }
        } catch (error) {
            console.error("Error verifying retry payment:", error);
            Swal.fire(
                'Error!',
                'An error occurred during payment verification. Please try again later.',
                'error'
            );
        }
    }
});
document.addEventListener('DOMContentLoaded', function () {
    // Cancel order button logic
    const cancelButtons = document.querySelectorAll('.cancel-order-btn');
    cancelButtons.forEach(button => {
        button.addEventListener('click', function () {
            const orderId = this.getAttribute('data-order-id');

            // Set the hidden input value in the modal with the order ID
            document.getElementById('cancelOrderId').value = orderId;

            // Show the cancel order modal
            const cancelOrderModal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
            cancelOrderModal.show();
        });
    });

    // Confirm cancellation button logic
    const confirmCancelButton = document.getElementById('confirmCancelOrder');
    confirmCancelButton.addEventListener('click', function () {
        const orderId = document.getElementById('cancelOrderId').value;
        const reason = document.getElementById('cancelReason').value;

        if (!reason) {
            Swal.fire({
                title: 'Error!',
                text: 'Please select a reason for cancellation.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        // Send cancellation request to the server
        fetch(`/cancel-order/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reason })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Canceled!',
                    text: 'Your order has been canceled.',
                    icon: 'success'
                }).then(() => {
                    window.location.reload(); // Reload the page to reflect changes
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Failed to cancel the order.',
                    icon: 'error'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred.',
                icon: 'error'
            });
        });
    });
});

    document.addEventListener('DOMContentLoaded', function () {
        // Open the Return Order Modal
        const returnButtons = document.querySelectorAll('.request-return-btn');
        returnButtons.forEach(button => {
            button.addEventListener('click', function () {
                const orderId = this.getAttribute('data-order-id');
                document.getElementById('returnOrderId').value = orderId;
                const returnOrderModal = new bootstrap.Modal(document.getElementById('returnOrderModal'));
                returnOrderModal.show();
            });
        });

        // Confirm Return Order
        const confirmReturnButton = document.getElementById('confirmReturnOrder');
        confirmReturnButton.addEventListener('click', function () {
            const orderId = document.getElementById('returnOrderId').value;
            const reason = document.getElementById('returnReason').value;

            if (!reason) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please select a reason for the return.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Send return request to the server
            fetch(`/return-order/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Return Requested!',
                        text: 'Your return request has been submitted.',
                        icon: 'success'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to request a return.',
                        icon: 'error'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An unexpected error occurred.',
                    icon: 'error'
                });
            });
        });
    });



</script>
